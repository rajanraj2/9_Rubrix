openapi: 3.1.0
info:
  title: Hackathon Platform API
  description: API for managing hackathons, submissions, and users
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://api.hackathonplatform.com
    description: Production server

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
        phoneNumber:
          type: string
        role:
          type: string
          enum: [student, teacher, admin]
    
    Student:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            schoolCollegeName:
              type: string
            state:
              type: string
            district:
              type: string
            grade:
              type: string
            gender:
              type: string
              enum: [male, female, other]
    
    Teacher:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            schoolCollegeName:
              type: string
            gender:
              type: string
              enum: [male, female, other]
            state:
              type: string
            collegeNumber:
              type: string
    
    Hackathon:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        registrationEndDate:
          type: string
          format: date-time
        resultsDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [draft, published, ongoing, completed]
        coverImage:
          type: string
        creator:
          type: string
          format: uuid
        collaborators:
          type: array
          items:
            type: string
            format: uuid
        code:
          type: string
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Participant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        hackathon:
          type: string
          format: uuid
        joinedAt:
          type: string
          format: date-time
    
    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        participant:
          type: string
          format: uuid
        hackathon:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        files:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              originalName:
                type: string
              mimetype:
                type: string
              size:
                type: integer
        shortlisted:
          type: boolean
        score:
          type: number
        feedback:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string

paths:
  /api/auth/register/student:
    post:
      summary: Register a new student
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - phoneNumber
                - schoolCollegeName
                - state
                - district
                - grade
                - gender
                - pin
              properties:
                fullName:
                  type: string
                phoneNumber:
                  type: string
                schoolCollegeName:
                  type: string
                state:
                  type: string
                district:
                  type: string
                grade:
                  type: string
                gender:
                  type: string
                  enum: [male, female, other]
                pin:
                  type: string
      responses:
        '201':
          description: Student registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/register/teacher:
    post:
      summary: Register a new teacher
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - phoneNumber
                - schoolCollegeName
                - gender
                - state
                - collegeNumber
                - pin
              properties:
                fullName:
                  type: string
                phoneNumber:
                  type: string
                schoolCollegeName:
                  type: string
                gender:
                  type: string
                  enum: [male, female, other]
                state:
                  type: string
                collegeNumber:
                  type: string
                pin:
                  type: string
      responses:
        '201':
          description: Teacher registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phoneNumber
                - pin
                - role
              properties:
                phoneNumber:
                  type: string
                pin:
                  type: string
                role:
                  type: string
                  enum: [student, teacher, admin]
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/auth/logout:
    get:
      summary: Logout a user
      tags:
        - Authentication
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
  
  /api/auth/me:
    get:
      summary: Get current user
      tags:
        - Authentication
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons:
    get:
      summary: Get all hackathons
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: List of hackathons
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hackathon'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - startDate
                - endDate
                - registrationEndDate
                - resultsDate
              properties:
                title:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                registrationEndDate:
                  type: string
                  format: date-time
                resultsDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [draft, published]
                isPublic:
                  type: boolean
      responses:
        '201':
          description: Hackathon created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Hackathon'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/completed:
    get:
      summary: Get completed hackathons
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: List of completed hackathons
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hackathon'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}:
    get:
      summary: Get a specific hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hackathon details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Hackathon'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                registrationEndDate:
                  type: string
                  format: date-time
                resultsDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [draft, published, ongoing, completed]
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Hackathon updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Hackathon'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hackathon deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/join-by-code:
    post:
      summary: Join a hackathon using a code
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
      responses:
        '200':
          description: Joined hackathon successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Participant'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}/participants:
    post:
      summary: Register as a participant for a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Registered as participant successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Participant'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all participants for a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of hackathon participants
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participant'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}/leaderboard:
    get:
      summary: Get leaderboard for a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Hackathon leaderboard
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        participant:
                          $ref: '#/components/schemas/Participant'
                        submission:
                          $ref: '#/components/schemas/Submission'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}/collaborators:
    post:
      summary: Add collaborators to a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - collaborators
              properties:
                collaborators:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Collaborators added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Hackathon'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}/submissions:
    get:
      summary: Get all submissions for a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of hackathon submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/hackathons/{id}/shortlisted:
    get:
      summary: Get shortlisted submissions for a hackathon
      tags:
        - Hackathons
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of shortlisted hackathon submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Hackathon not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/submissions:
    post:
      summary: Create a new submission
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - hackathonId
                - title
                - description
              properties:
                hackathonId:
                  type: string
                title:
                  type: string
                description:
                  type: string
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Submission created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Submission'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/submissions/my-submissions:
    get:
      summary: Get user's submissions
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      responses:
        '200':
          description: List of user's submissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/submissions/{id}:
    get:
      summary: Get a specific submission
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Submission details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Submission'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a submission
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: number
                feedback:
                  type: string
      responses:
        '200':
          description: Submission updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Submission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/submissions/{id}/shortlist:
    post:
      summary: Toggle shortlist status for a submission
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shortlist status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Submission'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /api/submissions/{submissionId}/file/{fileIndex}/presigned-url:
    get:
      summary: Get presigned URL for file download
      tags:
        - Submissions
      security:
        - cookieAuth: []
        - bearerAuth: []
      parameters:
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
        - name: fileIndex
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Presigned URL for file download
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  url:
                    type: string
        '404':
          description: File not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 